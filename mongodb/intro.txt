//Se esta utilizando la versin 4.4.0 ya que es la version que fue compatible con la raspberry

//Para crear una base de datos
use nueva_db

//Para ver los stats de la base de datos
db.stats()

//La base de datos se crea pero realmente no se crea porque no contiene objetos/colecciones
//Para create una coleccion
db.createCollection("mi coleccion")

//Para listas las bases de datos existentes
Las bases de datos nuevas no aparecen hasta que tengan una coleccion creada
show dbs

//CRUD
//Agregar usuario (CREATE)
db.usuarios.insertOne({
    nombre:"Mauro",
    edad:25,
    ciudad:"El Carmen"
})

db.usuarios.insertOne({
    nombre:"Pablo",
    edad:24,
    ciudad:"Apodaca"
})

db.usuarios.insertOne({
    nombre:"Felix",
    edad:25,
    ciudad:"Juarez"
})

//Esto agrega en automtico un ObjectID


//Buscar usuarios (READ)
db.usuarios.find()

//Aplicando filtros:
db.usuarios.find({edad:{$gt:20}})

//Actualizar un usuario (UPDATE)
//En este caso se actualiza solmente el primer registro que encuentre
db.usuarios.updateOne(
    {nombre:"Pablo"},
    {$set:{edad:25}}
)

//Eliminar Un registro (DELETE)
db.usuarios.deleteOne({
    nombre:"Pablo"
})
//En este caso borra la primera coincidencia que encuentre


//Gestion de tareas asignadas a un usuario (Union entre usuarios)
//Primero sacamos el ID del usuario
db.usuarios.findOne({nombre:'Felix'})

db.createCollection('tareas')
db.tareas.insertOne({
    usuarioID:ObjectId("6732909dc3db063357b20496"),
    descripcion:"Generar reportes mensuales",
    estado:"Pendiente"
})

db.tareas.insertOne({
    usuarioID:ObjectId("6732909dc3db063357b20496"),
    descripcion:"Conseguir regalos de navidad",
    estado:"Pendiente"
})


db.tareas.insertOne({
    usuarioID:ObjectId("67328f7bc3db063357b20494"),
    descripcion:"Hacer presentacion GenAI",
    estado:"Pendiente"
})

//Para buscar en una tabla enlazada con otra
db.tareas.find({usuarioID:ObjectId("67328f7bc3db063357b20494")})

//Una manera que encontre un poco mas elegante de hacerlo
db.tareas.find({usuarioID:db.usuarios.findOne({nombre:"Mauro"})._id})

//Para actualizar una tarea de un usuario
db.tareas.updateOne(
    {_id:ObjectId("67329345d236bf8937730021")},
    {$set:{estado:"Completada"}}
)

//Agregar un nuevo campo a la tabla
db.tareas.updateOne(
    {_id:ObjectId("6732930dd236bf8937730020")},
    {$set:{comentario:"Esta tarea no corresponde este usuario"}}
)

//Si quisiera eliminar una tarea que corresponde a un usuario:
db.tareas.deleteOne(
    {_id:ObjectId("6732930dd236bf8937730020")}
)

//Comando insertMany()
//Para propositos del ejemplo primero vamos a crear una coleccion
db.createCollection("productos")

db.productos.insertMany([
    {nombre:"Zote",precio:19.99},
    {nombre:"Arroz",precio:16.99},
    {nombre:"Azucar",precio:38},
    {nombre:"Lechuga",precio:24}
])

//En este caso si ocurre un error no va a insertar nada, tienen que pasar todos

//Para ver lo que agregamos utilizamos db.productos.find()


//Agregar un registro con ID Personalizado
db.usuarios.insertMany([
    {_id:1,nombre:"Hector"},
    {_id:70,nombre:"Melchor"},
    {_id:19,nombre:"Edson"}
])


//Uso de find
//primero creamos datos dummy
db.usuarios.insertMany([ 
    { nombre: "Juan Perez", edad: 35, correo: "juan@example.com" }, 
    { nombre: "Maria Gonzalez", edad: 28, correo: "maria@example.com" },
    { nombre: "Pedro Ramirez", edad: 42, correo: "pedro@example.com" }, 
    { nombre: "Ana Rodriguez", edad: 31, correo: "ana@example.com" }, 
    { nombre: "Luisa Martinez", edad: 25, correo: "luisa@example.com" }, 
    { nombre: "Carlos Sanchez", edad: 40, correo: "carlos@example.com" }, 
    { nombre: "Sofia Lopez", edad: 22, correo: "sofia@example.com" }, 
    { nombre: "Andres Torres", edad: 33, correo: "andres@example.com" }, 
    { nombre: "Elena Garcia", edad: 29, correo: "elena@example.com" }, 
    { nombre: "Diego Jimenez", edad: 38, correo: "diego@example.com" }
])

//Para crear los filtrados
//Filtra por edades mayor a 30 años
db.usuarios.find({edad:{$gt:30}})

//Busqueda por un correo con coincidencia exacta
db.usuarios.find({correo:"andres@example.com"})

//Busqueda en un rango
db.usuarios.find({edad:{$gte:25,$lte:30}})


//Actualizaciones/Cambios en los datos
//updateOne
db.usuarios.updateOne(
    {nombre:'Juan Perez'},
    {$set:{edad:36}}
)
//Este actualizara solamente el primer registro que encuentre

//update
//db.usuarios.update({filtro, actualizacion, opciones})
db.usuarios.update(
    {edad:25},
    {$set:{edad:24}},
    {multi:true}
)
//Con esta opcion podemos elegir multi:true para que modifique todas las coincidencias
//PERO ESTA FUNCION ESTA DEPRECIDA, HAY QUEUSAR UPDATE MANY

//updateMany
db.usuarios.updateMany(
    {edad:24},
    {$set:{edad:25}}
)

//replaceOne
db.usuarios.replaceOne(
    {nombre:'Juan Perez'},
    {nombre: 'Juan Gomez', edad:28, correo:'juan@indeciso.com'}
)
//Este reemplaza todo el documento/registro, si no pones todos los datos, borra los que no pusiste

// Objeto cursor
// Aplica una funcion de javascript a un resultado
db.usuarios.find({edad:25}).forEach(function(usuario){
    print(usuario.nombre)
})

//Aplicar el cursor sin filtro en el find
db.usuarios.find({}).limit(2).forEach(function(usuario){
    print(usuario.nombre)
})

// Aplicar paginacion para brincarnos X resultados
db.usuarios.find({}).skip(1).limit(2).forEach(function(usuario){
    print(usuario.nombre)
})

//Aplicar ordeniamiento a los resultados de la busqueda
db.usuarios.find({}).skip(1).limit(2).sort({edad:-1}).forEach(function(usuario){
    print(usuario.nombre)
})

// Proyeecciones
// Se usan para no traer todos los datos, sino solo los seleccionados, en este ejemplo no trae la ID
db.usuarios.find({}, {_id:0, nombre:1, correo:1})

// Para hacer otro ejemplo creamos la coleccion biblioteca
db.createCollection('biblioteca')
// Insertamos dummy data
db.biblioteca.insertMany([     
    {         
        libro: { titulo: "El Gran Gatsby", 
            autor: "F. Scott Fitzgerald" },         
        year: 1925,         
        type: "Ficcion"     
    },
    {         
        libro: { titulo: "Los Pilares de la Tierra", 
            autor: "Ken Follett" },         
        year: 1989,         
        type: "Historica"     
    },     
    {         
        libro: { titulo: "La Sombra del Viento", 
            autor: "Carlos Ruiz Zafan" },         
        year: 2001,         
        type: "Misterio"     
    },     
    {         
        libro: { titulo: "Cien años de soledad", 
            autor: "Gabriel Garcia Marquez" },         
        year: 1967,         
        type: "Realismo magico"     
    },     
    {         
        libro: { titulo: "1984", 
            autor: "George Orwell" },         
        year: 1949,         
        type: "Ciencia ficcion"    
    },     
    {         
        libro: { titulo: "Matar a un ruiseñor", 
            autor: "Harper Lee" },         
        year: 1960,         
        type: "Novela"     
    },     
    {         
        libro: { titulo: "El Hobbit", 
            autor: "J.R.R. Tolkien" },         
        year: 1937,         
        type: "Fantasia"     
    },     
    {         
        libro: { titulo: "Crimen y castigo", 
            autor: "Fyodor Dostoevsky" },         
        year: 1866,         
        type: "Novela"     
    },     
    {         
        libro: { titulo: "Don Quijote de la Mancha", 
            autor: "Miguel de Cervantes" },         
        year: 1605,         
        type: "Novela"    
    },     
    {         
        libro: { titulo: "Ulises", 
            autor: "James Joyce" },         
        year: 1922,         
        type: "Novela"     
    },     
    {         
        libro: { titulo: "Orgullo y prejuicio", 
            autor: "Jane Austen" },         
        year: 1813,        
        type: "Novela"    
    },     
    {         
        libro: { titulo: "En busca del tiempo perdido", 
            autor: "Marcel Proust" },         
        year: 1913,         
        type: "Novela"     
    },     
    {        
        libro: { titulo: "Cumbres Borrascosas", 
            autor: "Emily Bront" },         
        year: 1847,         
        type: "Novela"     
    },     
    {         
        libro: { titulo: "Moby-Dick", 
            autor: "Herman Melville" },         
        year: 1851,         
        type: "Aventura"     
    },     
    {         
        libro: { titulo: "El Conde de Montecristo", 
            autor: "Alexandre Dumas" },         
        year: 1844,         
        type: "Aventura"    
    },     
    { 
        libro: { titulo: "Rayuela", 
            autor: "Julio Cortazar" }, 
        year: 1963, 
        type: "Experimental" 
    }, 
    {
        libro: { titulo: "Cronica de una muerte anunciada", 
            autor: "Gabriel Garcia Marquez" }, 
        year: 1981, 
        type: "Novela" 
    },
    {
        libro: { titulo: "El retrato de Dorian Gray", 
            autor: "Oscar Wilde" }, 
        year: 1890, 
        type: "Novela"
    },
    {
        libro: { titulo: "El Señor de los Anillos", 
            autor: "J.R.R. Tolkien" }, 
        year: 1954, 
        type: "Fantasia"
    },
    {
        libro: { titulo: "Cien años de soledad", 
            autor: "Gabriel Garcia Marquez" }, 
        year: 1967, 
        type: "Realismo magico"
    }
]);

// podemos consultar un objeto anidado de una proyeccion
db.biblioteca.find({},{_id:0,"libro.titulo":1,"libro.autor":1})

// Podemos omitir varios atributos usando solo 0's en la proyeccion
db.biblioteca.find({},{_id:0,"libro.titulo":0})

// Para crear un respaldo de nuestra base de datos creamos
mongodump --db nueva_db --out ./backups/

//Para restaurar el respaldo que acabamos de crear en una nueva base de datos
mongorestore --db nueva_db_bak ./backups/nueva_db

//Para eliminar una coleccion de una forma primero creamos la coleccion pruebas
db.createCollection('pruebas')
//podemos ver que existe
show collections
// despues podemos eliminarla usando drop
db.pruebas.drop()
//podemos ver que se elimino
show collections

// otra forma de eliminar que sirve para colecciones con espacios como el "mi coleccion" del inicio
db.getCollection('mi coleccion').drop( )
show collections

// para eliminar una BD completa, en este caso eliminando la prueba
use nueva_db_bak
db.stats()
db.dropDatabase()
show dbs

//crear coleccion para pruebas y demostracion del esquema flexible
db.createCollection('pruebas')
db.pruebas.insertOne({
    nombre:"Felix",
    edad:25,
    lenguajes:["Python", "Javascript"]
})

db.pruebas.insertOne({
    nombre:"Mauro",
    edad:25,
    especializacion:"ServiceNow"
})

// Para crear una coleccion con esquema fijo:
db.createCollection('empleados',{
    validator:{
        $jsonSchema:{
            bsonType:'object',
            required: ['nombre','correo','edad'],
            properties:{
                nombre:{
                    bsonType: 'string'
                },
                correo:{
                    bsonType: 'string',
                    pattern: '^[^@]+@[^@]+\.[^@]+$'
                },
                edad:{
                    bsonType: 'int',
                    minimum: 16
                }
            }
        }
    }
})

//Error por el minimo de edad
db.empleados.insertOne({
    nombre:"Alexis Nicolas",
    edad: NumberInt(15),
    correo: "alexis@nvr.com"
})
//Error por el correo que no cumple la regex
db.empleados.insertOne({
    nombre:"Alexis Nicolas",
    edad: NumberInt(20),
    correo: "alexis"
})
//error por no contar con todos los campos
db.empleados.insertOne({
    nombre:"Alexis Nicolas",
    edad:NumberInt(20)
})

//Hay que cumplir con todos los requisitos que establecimos para poder insertar un registro
db.empleados.insertOne({
    nombre:"Alexis",
    correo:"alexis@nvm.com",
    edad:NumberInt(20)
})


//Para limpiar la pantalla se usa cls